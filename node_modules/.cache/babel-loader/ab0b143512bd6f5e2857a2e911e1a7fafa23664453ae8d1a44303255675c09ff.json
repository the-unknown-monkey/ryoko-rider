{"ast":null,"code":"import { createContext as $3bkAK$createContext, useMemo as $3bkAK$useMemo, createElement as $3bkAK$createElement, useContext as $3bkAK$useContext } from \"react\";\nfunction $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {\n  const Context = /*#__PURE__*/$3bkAK$createContext(defaultContext);\n  function Provider(props) {\n    const {\n      children: children,\n      ...context\n    } = props; // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = $3bkAK$useMemo(() => context, Object.values(context));\n    return /*#__PURE__*/$3bkAK$createElement(Context.Provider, {\n      value: value\n    }, children);\n  }\n  function useContext(consumerName) {\n    const context = $3bkAK$useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext];\n}\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\nfunction $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName) {\n  let createContextScopeDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let defaultContexts = [];\n  /* -----------------------------------------------------------------------------------------------\n  * createContext\n  * ---------------------------------------------------------------------------------------------*/\n  function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {\n    const BaseContext = /*#__PURE__*/$3bkAK$createContext(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n    function Provider(props) {\n      const {\n        scope: scope,\n        children: children,\n        ...context\n      } = props;\n      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext; // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = $3bkAK$useMemo(() => context, Object.values(context));\n      return /*#__PURE__*/$3bkAK$createElement(Context.Provider, {\n        value: value\n      }, children);\n    }\n    function useContext(consumerName, scope) {\n      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext;\n      const context = $3bkAK$useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext];\n  }\n  /* -----------------------------------------------------------------------------------------------\n  * createScope\n  * ---------------------------------------------------------------------------------------------*/\n  const createScope = () => {\n    const scopeContexts = defaultContexts.map(defaultContext => {\n      return /*#__PURE__*/$3bkAK$createContext(defaultContext);\n    });\n    return function useScope(scope) {\n      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;\n      return $3bkAK$useMemo(() => ({\n        [`__scope${scopeName}`]: {\n          ...scope,\n          [scopeName]: contexts\n        }\n      }), [scope, contexts]);\n    };\n  };\n  createScope.scopeName = scopeName;\n  return [$c512c27ab02ef895$export$fd42f52fd3ae1109, $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)];\n}\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\nfunction $c512c27ab02ef895$var$composeContextScopes() {\n  for (var _len = arguments.length, scopes = new Array(_len), _key = 0; _key < _len; _key++) {\n    scopes[_key] = arguments[_key];\n  }\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n  const createScope1 = () => {\n    const scopeHooks = scopes.map(createScope => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName\n    }));\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes1 = scopeHooks.reduce((nextScopes, _ref) => {\n        let {\n          useScope: useScope,\n          scopeName: scopeName\n        } = _ref;\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return {\n          ...nextScopes,\n          ...currentScope\n        };\n      }, {});\n      return $3bkAK$useMemo(() => ({\n        [`__scope${baseScope.scopeName}`]: nextScopes1\n      }), [nextScopes1]);\n    };\n  };\n  createScope1.scopeName = baseScope.scopeName;\n  return createScope1;\n}\nexport { $c512c27ab02ef895$export$fd42f52fd3ae1109 as createContext, $c512c27ab02ef895$export$50c7b4e9d9f19c1 as createContextScope };","map":{"version":3,"mappings":"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","names":["createContext","$c512c27ab02ef895$export$fd42f52fd3ae1109","rootComponentName","defaultContext","Context","React","Provider","props","children","context","value","Object","values","$3bkAK$createElement","useContext","consumerName","undefined","Error","displayName","createContextScope","$c512c27ab02ef895$export$50c7b4e9d9f19c1","scopeName","createContextScopeDeps","defaultContexts","BaseContext","index","length","scope","createScope","scopeContexts","map","useScope","contexts","composeContextScopes","$c512c27ab02ef895$var$composeContextScopes","scopes","baseScope","createScope1","scopeHooks","useComposedScopes","overrideScopes","nextScopes","reduce","scopeProps","currentScope"],"sources":["/home/dev/Desktop/bijil/car-rental-react-main (1)/car-rental-react-main/node_modules/@radix-ui/react-context/dist/packages/react/context/src/createContext.tsx"],"sourcesContent":["import * as React from 'react';\n\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = React.createContext<ContextValueType | undefined>(defaultContext);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext;\n    // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\ntype Scope<C = any> = { [scopeName: string]: React.Context<C>[] } | undefined;\ntype ScopeHook = (scope: Scope) => { [__scopeProp: string]: Scope };\ninterface CreateScope {\n  scopeName: string;\n  (): ScopeHook;\n}\n\nfunction createContextScope(scopeName: string, createContextScopeDeps: CreateScope[] = []) {\n  let defaultContexts: any[] = [];\n\n  /* -----------------------------------------------------------------------------------------------\n   * createContext\n   * ---------------------------------------------------------------------------------------------*/\n\n  function createContext<ContextValueType extends object | null>(\n    rootComponentName: string,\n    defaultContext?: ContextValueType\n  ) {\n    const BaseContext = React.createContext<ContextValueType | undefined>(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    function Provider(\n      props: ContextValueType & { scope: Scope<ContextValueType>; children: React.ReactNode }\n    ) {\n      const { scope, children, ...context } = props;\n      const Context = scope?.[scopeName][index] || BaseContext;\n      // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n      return <Context.Provider value={value}>{children}</Context.Provider>;\n    }\n\n    function useContext(consumerName: string, scope: Scope<ContextValueType | undefined>) {\n      const Context = scope?.[scopeName][index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext;\n      // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext] as const;\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * createScope\n   * ---------------------------------------------------------------------------------------------*/\n\n  const createScope: CreateScope = () => {\n    const scopeContexts = defaultContexts.map((defaultContext) => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope: Scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(\n        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),\n        [scope, contexts]\n      );\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext, composeContextScopes(createScope, ...createContextScopeDeps)] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\nfunction composeContextScopes(...scopes: CreateScope[]) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope: CreateScope = () => {\n    const scopeHooks = scopes.map((createScope) => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName,\n    }));\n\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes, ...currentScope };\n      }, {});\n\n      return React.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nexport { createContext, createContextScope };\nexport type { CreateScope, Scope };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}