{"ast":null,"code":"import $kqwpH$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport { createContext as $kqwpH$createContext, forwardRef as $kqwpH$forwardRef, useContext as $kqwpH$useContext, useState as $kqwpH$useState, useEffect as $kqwpH$useEffect, createElement as $kqwpH$createElement, useRef as $kqwpH$useRef } from \"react\";\nimport { composeEventHandlers as $kqwpH$composeEventHandlers } from \"@radix-ui/primitive\";\nimport { Primitive as $kqwpH$Primitive, dispatchDiscreteCustomEvent as $kqwpH$dispatchDiscreteCustomEvent } from \"@radix-ui/react-primitive\";\nimport { useComposedRefs as $kqwpH$useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { useCallbackRef as $kqwpH$useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { useEscapeKeydown as $kqwpH$useEscapeKeydown } from \"@radix-ui/react-use-escape-keydown\";\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayer\n * -----------------------------------------------------------------------------------------------*/\nconst $5cb92bef7577960e$var$DISMISSABLE_LAYER_NAME = 'DismissableLayer';\nconst $5cb92bef7577960e$var$CONTEXT_UPDATE = 'dismissableLayer.update';\nconst $5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE = 'dismissableLayer.pointerDownOutside';\nconst $5cb92bef7577960e$var$FOCUS_OUTSIDE = 'dismissableLayer.focusOutside';\nlet $5cb92bef7577960e$var$originalBodyPointerEvents;\nconst $5cb92bef7577960e$var$DismissableLayerContext = /*#__PURE__*/$kqwpH$createContext({\n  layers: new Set(),\n  layersWithOutsidePointerEventsDisabled: new Set(),\n  branches: new Set()\n});\nconst $5cb92bef7577960e$export$177fb62ff3ec1f22 = /*#__PURE__*/$kqwpH$forwardRef((props, forwardedRef) => {\n  var _node$ownerDocument;\n  const {\n    disableOutsidePointerEvents = false,\n    onEscapeKeyDown: onEscapeKeyDown,\n    onPointerDownOutside: onPointerDownOutside,\n    onFocusOutside: onFocusOutside,\n    onInteractOutside: onInteractOutside,\n    onDismiss: onDismiss,\n    ...layerProps\n  } = props;\n  const context = $kqwpH$useContext($5cb92bef7577960e$var$DismissableLayerContext);\n  const [node1, setNode] = $kqwpH$useState(null);\n  const ownerDocument = (_node$ownerDocument = node1 === null || node1 === void 0 ? void 0 : node1.ownerDocument) !== null && _node$ownerDocument !== void 0 ? _node$ownerDocument : globalThis === null || globalThis === void 0 ? void 0 : globalThis.document;\n  const [, force] = $kqwpH$useState({});\n  const composedRefs = $kqwpH$useComposedRefs(forwardedRef, node => setNode(node));\n  const layers = Array.from(context.layers);\n  const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1); // prettier-ignore\n  const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled); // prettier-ignore\n  const index = node1 ? layers.indexOf(node1) : -1;\n  const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n  const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n  const pointerDownOutside = $5cb92bef7577960e$var$usePointerDownOutside(event => {\n    const target = event.target;\n    const isPointerDownOnBranch = [...context.branches].some(branch => branch.contains(target));\n    if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n    onPointerDownOutside === null || onPointerDownOutside === void 0 || onPointerDownOutside(event);\n    onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);\n    if (!event.defaultPrevented) onDismiss === null || onDismiss === void 0 || onDismiss();\n  }, ownerDocument);\n  const focusOutside = $5cb92bef7577960e$var$useFocusOutside(event => {\n    const target = event.target;\n    const isFocusInBranch = [...context.branches].some(branch => branch.contains(target));\n    if (isFocusInBranch) return;\n    onFocusOutside === null || onFocusOutside === void 0 || onFocusOutside(event);\n    onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);\n    if (!event.defaultPrevented) onDismiss === null || onDismiss === void 0 || onDismiss();\n  }, ownerDocument);\n  $kqwpH$useEscapeKeydown(event => {\n    const isHighestLayer = index === context.layers.size - 1;\n    if (!isHighestLayer) return;\n    onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event);\n    if (!event.defaultPrevented && onDismiss) {\n      event.preventDefault();\n      onDismiss();\n    }\n  }, ownerDocument);\n  $kqwpH$useEffect(() => {\n    if (!node1) return;\n    if (disableOutsidePointerEvents) {\n      if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n        $5cb92bef7577960e$var$originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n        ownerDocument.body.style.pointerEvents = 'none';\n      }\n      context.layersWithOutsidePointerEventsDisabled.add(node1);\n    }\n    context.layers.add(node1);\n    $5cb92bef7577960e$var$dispatchUpdate();\n    return () => {\n      if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) ownerDocument.body.style.pointerEvents = $5cb92bef7577960e$var$originalBodyPointerEvents;\n    };\n  }, [node1, ownerDocument, disableOutsidePointerEvents, context]);\n  /**\n  * We purposefully prevent combining this effect with the `disableOutsidePointerEvents` effect\n  * because a change to `disableOutsidePointerEvents` would remove this layer from the stack\n  * and add it to the end again so the layering order wouldn't be _creation order_.\n  * We only want them to be removed from context stacks when unmounted.\n  */\n  $kqwpH$useEffect(() => {\n    return () => {\n      if (!node1) return;\n      context.layers.delete(node1);\n      context.layersWithOutsidePointerEventsDisabled.delete(node1);\n      $5cb92bef7577960e$var$dispatchUpdate();\n    };\n  }, [node1, context]);\n  $kqwpH$useEffect(() => {\n    const handleUpdate = () => force({});\n    document.addEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);\n    return () => document.removeEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);\n  }, []);\n  return /*#__PURE__*/$kqwpH$createElement($kqwpH$Primitive.div, $kqwpH$babelruntimehelpersesmextends({}, layerProps, {\n    ref: composedRefs,\n    style: {\n      pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? 'auto' : 'none' : undefined,\n      ...props.style\n    },\n    onFocusCapture: $kqwpH$composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture),\n    onBlurCapture: $kqwpH$composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture),\n    onPointerDownCapture: $kqwpH$composeEventHandlers(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)\n  }));\n});\n/*#__PURE__*/\nObject.assign($5cb92bef7577960e$export$177fb62ff3ec1f22, {\n  displayName: $5cb92bef7577960e$var$DISMISSABLE_LAYER_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayerBranch\n * -----------------------------------------------------------------------------------------------*/\nconst $5cb92bef7577960e$var$BRANCH_NAME = 'DismissableLayerBranch';\nconst $5cb92bef7577960e$export$4d5eb2109db14228 = /*#__PURE__*/$kqwpH$forwardRef((props, forwardedRef) => {\n  const context = $kqwpH$useContext($5cb92bef7577960e$var$DismissableLayerContext);\n  const ref = $kqwpH$useRef(null);\n  const composedRefs = $kqwpH$useComposedRefs(forwardedRef, ref);\n  $kqwpH$useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      context.branches.add(node);\n      return () => {\n        context.branches.delete(node);\n      };\n    }\n  }, [context.branches]);\n  return /*#__PURE__*/$kqwpH$createElement($kqwpH$Primitive.div, $kqwpH$babelruntimehelpersesmextends({}, props, {\n    ref: composedRefs\n  }));\n});\n/*#__PURE__*/\nObject.assign($5cb92bef7577960e$export$4d5eb2109db14228, {\n  displayName: $5cb92bef7577960e$var$BRANCH_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/ /**\n                                                                                                     * Listens for `pointerdown` outside a react subtree. We use `pointerdown` rather than `pointerup`\n                                                                                                     * to mimic layer dismissing behaviour present in OS.\n                                                                                                     * Returns props to pass to the node we want to check for outside events.\n                                                                                                     */\nfunction $5cb92bef7577960e$var$usePointerDownOutside(onPointerDownOutside) {\n  let ownerDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : globalThis === null || globalThis === void 0 ? void 0 : globalThis.document;\n  const handlePointerDownOutside = $kqwpH$useCallbackRef(onPointerDownOutside);\n  const isPointerInsideReactTreeRef = $kqwpH$useRef(false);\n  const handleClickRef = $kqwpH$useRef(() => {});\n  $kqwpH$useEffect(() => {\n    const handlePointerDown = event => {\n      if (event.target && !isPointerInsideReactTreeRef.current) {\n        const eventDetail = {\n          originalEvent: event\n        };\n        function handleAndDispatchPointerDownOutsideEvent() {\n          $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {\n            discrete: true\n          });\n        }\n        /**\n        * On touch devices, we need to wait for a click event because browsers implement\n        * a ~350ms delay between the time the user stops touching the display and when the\n        * browser executres events. We need to ensure we don't reactivate pointer-events within\n        * this timeframe otherwise the browser may execute events that should have been prevented.\n        *\n        * Additionally, this also lets us deal automatically with cancellations when a click event\n        * isn't raised because the page was considered scrolled/drag-scrolled, long-pressed, etc.\n        *\n        * This is why we also continuously remove the previous listener, because we cannot be\n        * certain that it was raised, and therefore cleaned-up.\n        */\n        if (event.pointerType === 'touch') {\n          ownerDocument.removeEventListener('click', handleClickRef.current);\n          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;\n          ownerDocument.addEventListener('click', handleClickRef.current, {\n            once: true\n          });\n        } else handleAndDispatchPointerDownOutsideEvent();\n      }\n      isPointerInsideReactTreeRef.current = false;\n    };\n    /**\n    * if this hook executes in a component that mounts via a `pointerdown` event, the event\n    * would bubble up to the document and trigger a `pointerDownOutside` event. We avoid\n    * this by delaying the event listener registration on the document.\n    * This is not React specific, but rather how the DOM works, ie:\n    * ```\n    * button.addEventListener('pointerdown', () => {\n    *   console.log('I will log');\n    *   document.addEventListener('pointerdown', () => {\n    *     console.log('I will also log');\n    *   })\n    * });\n    */\n    const timerId = window.setTimeout(() => {\n      ownerDocument.addEventListener('pointerdown', handlePointerDown);\n    }, 0);\n    return () => {\n      window.clearTimeout(timerId);\n      ownerDocument.removeEventListener('pointerdown', handlePointerDown);\n      ownerDocument.removeEventListener('click', handleClickRef.current);\n    };\n  }, [ownerDocument, handlePointerDownOutside]);\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true\n  };\n}\n/**\n * Listens for when focus happens outside a react subtree.\n * Returns props to pass to the root (node) of the subtree we want to check.\n */\nfunction $5cb92bef7577960e$var$useFocusOutside(onFocusOutside) {\n  let ownerDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : globalThis === null || globalThis === void 0 ? void 0 : globalThis.document;\n  const handleFocusOutside = $kqwpH$useCallbackRef(onFocusOutside);\n  const isFocusInsideReactTreeRef = $kqwpH$useRef(false);\n  $kqwpH$useEffect(() => {\n    const handleFocus = event => {\n      if (event.target && !isFocusInsideReactTreeRef.current) {\n        const eventDetail = {\n          originalEvent: event\n        };\n        $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n          discrete: false\n        });\n      }\n    };\n    ownerDocument.addEventListener('focusin', handleFocus);\n    return () => ownerDocument.removeEventListener('focusin', handleFocus);\n  }, [ownerDocument, handleFocusOutside]);\n  return {\n    onFocusCapture: () => isFocusInsideReactTreeRef.current = true,\n    onBlurCapture: () => isFocusInsideReactTreeRef.current = false\n  };\n}\nfunction $5cb92bef7577960e$var$dispatchUpdate() {\n  const event = new CustomEvent($5cb92bef7577960e$var$CONTEXT_UPDATE);\n  document.dispatchEvent(event);\n}\nfunction $5cb92bef7577960e$var$handleAndDispatchCustomEvent(name, handler, detail, _ref) {\n  let {\n    discrete: discrete\n  } = _ref;\n  const target = detail.originalEvent.target;\n  const event = new CustomEvent(name, {\n    bubbles: false,\n    cancelable: true,\n    detail: detail\n  });\n  if (handler) target.addEventListener(name, handler, {\n    once: true\n  });\n  if (discrete) $kqwpH$dispatchDiscreteCustomEvent(target, event);else target.dispatchEvent(event);\n}\nconst $5cb92bef7577960e$export$be92b6f5f03c0fe9 = $5cb92bef7577960e$export$177fb62ff3ec1f22;\nconst $5cb92bef7577960e$export$aecb2ddcb55c95be = $5cb92bef7577960e$export$4d5eb2109db14228;\nexport { $5cb92bef7577960e$export$177fb62ff3ec1f22 as DismissableLayer, $5cb92bef7577960e$export$4d5eb2109db14228 as DismissableLayerBranch, $5cb92bef7577960e$export$be92b6f5f03c0fe9 as Root, $5cb92bef7577960e$export$aecb2ddcb55c95be as Branch };","map":{"version":3,"mappings":";;;;;;;;AASA;;;AAIA,MAAMA,4CAAsB,GAAG,kBAA/B;AACA,MAAMC,oCAAc,GAAG,yBAAvB;AACA,MAAMC,0CAAoB,GAAG,qCAA7B;AACA,MAAMC,mCAAa,GAAG,+BAAtB;AAEA,IAAIC,+CAAJ;AAEA,MAAMC,6CAAuB,gBAAGC,qBAAoB;EAClDC,MAAM,EAAE,IAAIC,GAAJ,EAD0C;EAElDC,sCAAsC,EAAE,IAAID,GAAJ,EAFU;EAGlDE,QAAQ,EAAE,IAAIF,GAAJ;CAHoB,CAAhC;AA0CA,MAAMG,yCAAgB,gBAAGL,kBACvB,CAACM,KAAD,EAAQC,YAAR,KAAyB;EAAA;EACvB,MAAM;IACJC,2BAA2B,GAAG,KAD1B;qBAEJC,eAFI;0BAGJC,oBAHI;oBAIJC,cAJI;uBAKJC,iBALI;eAMJC,SANI;IAOJ,GAAGC;EAAH,CAPI,GAQFR,KARJ;EASA,MAAMS,OAAO,GAAGf,kBAAiBD,6CAAjB,CAAhB;EACA,MAAM,CAACiB,KAAD,EAAOC,OAAP,IAAkBjB,gBAA+C,IAA/C,CAAxB;EACA,MAAMkB,aAAa,0BAAGF,KAAH,aAAGA,KAAH,uBAAGA,KAAI,CAAEE,aAAT,qEAA0BC,UAA1B,aAA0BA,UAA1B,uBAA0BA,UAAU,CAAEC,QAAzD;EACA,MAAM,GAAGC,KAAH,IAAYrB,gBAAe,EAAf,CAAlB;EACA,MAAMsB,YAAY,GAAGC,sBAAe,CAAChB,YAAD,EAAgBS,IAAD,IAAUC,OAAO,CAACD,IAAD,CAAhC,CAApC;EACA,MAAMf,MAAM,GAAGuB,KAAK,CAACC,IAAN,CAAWV,OAAO,CAACd,MAAnB,CAAf;EACA,MAAM,CAACyB,4CAAD,IAAiD,IAAIX,OAAO,CAACZ,sCAAZ,EAAoDwB,KAApD,CAA0D,EAA1D,CAAvD,CAhBuB,CAgB+F;EACtH,MAAMC,iDAAiD,GAAG3B,MAAM,CAAC4B,OAAP,CAAeH,4CAAf,CAA1D,CAjBuB,CAiBiG;EACxH,MAAMI,KAAK,GAAGd,KAAI,GAAGf,MAAM,CAAC4B,OAAP,CAAeb,KAAf,CAAH,GAA0B,EAA5C;EACA,MAAMe,2BAA2B,GAAGhB,OAAO,CAACZ,sCAAR,CAA+C6B,IAA/C,GAAsD,CAA1F;EACA,MAAMC,sBAAsB,GAAGH,KAAK,IAAIF,iDAAxC;EAEA,MAAMM,kBAAkB,GAAGC,2CAAqB,CAAEC,KAAD,IAAW;IAC1D,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;IACA,MAAMC,qBAAqB,GAAG,IAAIvB,OAAO,CAACX,QAAZ,EAAsBmC,IAAtB,CAA4BC,MAAD,IAAYA,MAAM,CAACC,QAAP,CAAgBJ,MAAhB,CAAvC,CAA9B;IACA,IAAI,CAACJ,sBAAD,IAA2BK,qBAA/B,EAAsD;IACtD5B,oBAAoB,SAApB,wBAAoB,WAApB,wBAAoB,CAAG0B,KAAH,CAApB;IACAxB,iBAAiB,SAAjB,qBAAiB,WAAjB,qBAAiB,CAAGwB,KAAH,CAAjB;IACA,IAAI,CAACA,KAAK,CAACM,gBAAX,EAA6B7B,SAAS,SAAT,aAAS,WAAT,aAAS,EAAtC;GAN8C,EAO7CK,aAP6C,CAAhD;EASA,MAAMyB,YAAY,GAAGC,qCAAe,CAAER,KAAD,IAAW;IAC9C,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;IACA,MAAMQ,eAAe,GAAG,IAAI9B,OAAO,CAACX,QAAZ,EAAsBmC,IAAtB,CAA4BC,MAAD,IAAYA,MAAM,CAACC,QAAP,CAAgBJ,MAAhB,CAAvC,CAAxB;IACA,IAAIQ,eAAJ,EAAqB;IACrBlC,cAAc,SAAd,kBAAc,WAAd,kBAAc,CAAGyB,KAAH,CAAd;IACAxB,iBAAiB,SAAjB,qBAAiB,WAAjB,qBAAiB,CAAGwB,KAAH,CAAjB;IACA,IAAI,CAACA,KAAK,CAACM,gBAAX,EAA6B7B,SAAS,SAAT,aAAS,WAAT,aAAS,EAAtC;GANkC,EAOjCK,aAPiC,CAApC;EASA4B,uBAAgB,CAAEV,KAAD,IAAW;IAC1B,MAAMW,cAAc,GAAGjB,KAAK,KAAKf,OAAO,CAACd,MAAR,CAAe+B,IAAf,GAAsB,CAAvD;IACA,IAAI,CAACe,cAAL,EAAqB;IACrBtC,eAAe,SAAf,mBAAe,WAAf,mBAAe,CAAG2B,KAAH,CAAf;IACA,IAAI,CAACA,KAAK,CAACM,gBAAP,IAA2B7B,SAA/B,EAA0C;MACxCuB,KAAK,CAACY,cAAN;MACAnC,SAAS,EAATA;;GANY,EAQbK,aARa,CAAhB;EAUAlB,iBAAgB,MAAM;IACpB,IAAI,CAACgB,KAAL,EAAW;IACX,IAAIR,2BAAJ,EAAiC;MAC/B,IAAIO,OAAO,CAACZ,sCAAR,CAA+C6B,IAA/C,KAAwD,CAA5D,EAA+D;QAC7DlC,+CAAyB,GAAGoB,aAAa,CAAC+B,IAAd,CAAmBC,KAAnB,CAAyBC,aAArD;QACAjC,aAAa,CAAC+B,IAAd,CAAmBC,KAAnB,CAAyBC,aAAzB,GAAyC,MAAzC;;MAEFpC,OAAO,CAACZ,sCAAR,CAA+CiD,GAA/C,CAAmDpC,KAAnD;;IAEFD,OAAO,CAACd,MAAR,CAAemD,GAAf,CAAmBpC,KAAnB;IACAqC,oCAAc,EAAdA;IACA,OAAO,MAAM;MACX,IACE7C,2BAA2B,IAC3BO,OAAO,CAACZ,sCAAR,CAA+C6B,IAA/C,KAAwD,CAF1D,EAIEd,aAAa,CAAC+B,IAAd,CAAmBC,KAAnB,CAAyBC,aAAzB,GAAyCrD,+CAAzC;KALJ;GAXF,EAmBG,CAACkB,KAAD,EAAOE,aAAP,EAAsBV,2BAAtB,EAAmDO,OAAnD,CAnBH,CAmBC;EAED;;;;;;EAMAf,iBAAgB,MAAM;IACpB,OAAO,MAAM;MACX,IAAI,CAACgB,KAAL,EAAW;MACXD,OAAO,CAACd,MAAR,CAAeqD,MAAf,CAAsBtC,KAAtB;MACAD,OAAO,CAACZ,sCAAR,CAA+CmD,MAA/C,CAAsDtC,KAAtD;MACAqC,oCAAc,EAAdA;KAJF;GADF,EAOG,CAACrC,KAAD,EAAOD,OAAP,CAPH,CAOC;EAEDf,iBAAgB,MAAM;IACpB,MAAMuD,YAAY,GAAGA,MAAMlC,KAAK,CAAC,EAAD,CAAhC;IACAD,QAAQ,CAACoC,gBAAT,CAA0B7D,oCAA1B,EAA0C4D,YAA1C;IACA,OAAO,MAAMnC,QAAQ,CAACqC,mBAAT,CAA6B9D,oCAA7B,EAA6C4D,YAA7C,CAAb;GAHF,EAIG,EAJH,CAIC;EAED,oBACEG,qBAACC,gBAAD,CAAWC,GAAX,2CACM9C,UADN,EADF;IAGI+C,GAAG,EAAEvC,YAFP;IAGE4B,KAAK,EAAE;MACLC,aAAa,EAAEpB,2BAA2B,GACtCE,sBAAsB,GACpB,MADoB,GAEpB,MAHoC,GAItC6B,SALC;MAML,GAAGxD,KAAK,CAAC4C;KATb;IAWEa,cAAc,EAAEC,2BAAoB,CAAC1D,KAAK,CAACyD,cAAP,EAAuBpB,YAAY,CAACoB,cAApC,CAXtC;IAYEE,aAAa,EAAED,2BAAoB,CAAC1D,KAAK,CAAC2D,aAAP,EAAsBtB,YAAY,CAACsB,aAAnC,CAZrC;IAaEC,oBAAoB,EAAEF,2BAAoB,CACxC1D,KAAK,CAAC4D,oBADkC,EAExChC,kBAAkB,CAACgC,oBAFqB;GAb5C,EADF;CA7FqB,CAAzB;AAoHA;AAAAC;EAAAC;CAAA;AAEA;;;AAIA,MAAMC,iCAAW,GAAG,wBAApB;AAKA,MAAMC,yCAAsB,gBAAGtE,kBAG7B,CAACM,KAAD,EAAQC,YAAR,KAAyB;EACzB,MAAMQ,OAAO,GAAGf,kBAAiBD,6CAAjB,CAAhB;EACA,MAAM8D,GAAG,GAAG7D,cAA4C,IAA5C,CAAZ;EACA,MAAMsB,YAAY,GAAGC,sBAAe,CAAChB,YAAD,EAAesD,GAAf,CAApC;EAEA7D,iBAAgB,MAAM;IACpB,MAAMgB,IAAI,GAAG6C,GAAG,CAACU,OAAjB;IACA,IAAIvD,IAAJ,EAAU;MACRD,OAAO,CAACX,QAAR,CAAiBgD,GAAjB,CAAqBpC,IAArB;MACA,OAAO,MAAM;QACXD,OAAO,CAACX,QAAR,CAAiBkD,MAAjB,CAAwBtC,IAAxB;OADF;;GAJJ,EAQG,CAACD,OAAO,CAACX,QAAT,CARH,CAQC;EAED,oBAAOsD,qBAACC,gBAAD,CAAWC,GAAX,2CAAmBtD,KAAnB,EAAP;IAAiCuD,GAAG,EAAEvC;GAA/B,EAAP;CAlB6B,CAA/B;AAqBA;AAAA6C;EAAAC;CAAA;AAEA,qGAKA;;;;;AAKA,SAASjC,2CAATqC,CACE9D,oBADF,EAGE;EAAA,IADAQ,aAAuB,uEAAGC,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEC,QAFxC;EAIE,MAAMqD,wBAAwB,GAAGC,qBAAc,CAAChE,oBAAD,CAA/C;EACA,MAAMiE,2BAA2B,GAAG3E,cAAa,KAAb,CAApC;EACA,MAAM4E,cAAc,GAAG5E,cAAa,MAAM,EAAnB,CAAvB;EAEAA,iBAAgB,MAAM;IACpB,MAAM6E,iBAAiB,GAAIzC,KAAD,IAAyB;MACjD,IAAIA,KAAK,CAACC,MAAN,IAAgB,CAACsC,2BAA2B,CAACJ,OAAjD,EAA0D;QACxD,MAAMO,WAAW,GAAG;UAAEC,aAAa,EAAE3C;SAArC;QAEA,SAAS4C,wCAATA,GAAoD;UAClDC,kDAA4B,CAC1BrF,0CAD0B,EAE1B6E,wBAF0B,EAG1BK,WAH0B,EAI1B;YAAEI,QAAQ,EAAE;WAJc,CAA5B;;QAQF;;;;;;;;;;;;QAYA,IAAI9C,KAAK,CAAC+C,WAAN,KAAsB,OAA1B,EAAmC;UACjCjE,aAAa,CAACuC,mBAAd,CAAkC,OAAlC,EAA2CmB,cAAc,CAACL,OAA1D;UACAK,cAAc,CAACL,OAAf,GAAyBS,wCAAzB;UACA9D,aAAa,CAACsC,gBAAd,CAA+B,OAA/B,EAAwCoB,cAAc,CAACL,OAAvD,EAAgE;YAAEa,IAAI,EAAE;WAAxE,CAAgE;SAHlE,MAKEJ,wCAAwC,EAAxCA;;MAGJL,2BAA2B,CAACJ,OAA5B,GAAsC,KAAtC;KAjCF;IAmCA;;;;;;;;;;;;;IAaA,MAAMc,OAAO,GAAGC,MAAM,CAACC,UAAP,CAAkB,MAAM;MACtCrE,aAAa,CAACsC,gBAAd,CAA+B,aAA/B,EAA8CqB,iBAA9C;KADc,EAEb,CAFa,CAAhB;IAGA,OAAO,MAAM;MACXS,MAAM,CAACE,YAAP,CAAoBH,OAApB;MACAnE,aAAa,CAACuC,mBAAd,CAAkC,aAAlC,EAAiDoB,iBAAjD;MACA3D,aAAa,CAACuC,mBAAd,CAAkC,OAAlC,EAA2CmB,cAAc,CAACL,OAA1D;KAHF;GApDF,EAyDG,CAACrD,aAAD,EAAgBuD,wBAAhB,CAzDH,CAyDC;EAED,OAAO;IACL;IACAP,oBAAoB,EAAEA,MAAOS,2BAA2B,CAACJ,OAA5B,GAAsC;GAFrE;;AAMF;;;;AAIA,SAAS3B,qCAAT6C,CACE9E,cADF,EAGE;EAAA,IADAO,aAAuB,uEAAGC,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEC,QAFxC;EAIE,MAAMsE,kBAAkB,GAAGhB,qBAAc,CAAC/D,cAAD,CAAzC;EACA,MAAMgF,yBAAyB,GAAG3F,cAAa,KAAb,CAAlC;EAEAA,iBAAgB,MAAM;IACpB,MAAM4F,WAAW,GAAIxD,KAAD,IAAuB;MACzC,IAAIA,KAAK,CAACC,MAAN,IAAgB,CAACsD,yBAAyB,CAACpB,OAA/C,EAAwD;QACtD,MAAMO,WAAW,GAAG;UAAEC,aAAa,EAAE3C;SAArC;QACA6C,kDAA4B,CAACpF,mCAAD,EAAgB6F,kBAAhB,EAAoCZ,WAApC,EAAiD;UAC3EI,QAAQ,EAAE;SADgB,CAA5B;;KAHJ;IAQAhE,aAAa,CAACsC,gBAAd,CAA+B,SAA/B,EAA0CoC,WAA1C;IACA,OAAO,MAAM1E,aAAa,CAACuC,mBAAd,CAAkC,SAAlC,EAA6CmC,WAA7C,CAAb;GAVF,EAWG,CAAC1E,aAAD,EAAgBwE,kBAAhB,CAXH,CAWC;EAED,OAAO;IACL3B,cAAc,EAAEA,MAAO4B,yBAAyB,CAACpB,OAA1B,GAAoC,IADtD;IAELN,aAAa,EAAEA,MAAO0B,yBAAyB,CAACpB,OAA1B,GAAoC;GAF5D;;AAMF,SAASlB,oCAATwC,GAA0B;EACxB,MAAMzD,KAAK,GAAG,IAAI0D,WAAJ,CAAgBnG,oCAAhB,CAAd;EACAyB,QAAQ,CAAC2E,aAAT,CAAuB3D,KAAvB;;AAGF,SAAS6C,kDAATe,CACEC,IADF,EAEEC,OAFF,EAGEC,MAHF,QAKE;EAAA,IADA;cAAEjB;EAAAA,CAJJ;EAME,MAAM7C,MAAM,GAAG8D,MAAM,CAACpB,aAAP,CAAqB1C,MAApC;EACA,MAAMD,KAAK,GAAG,IAAI0D,WAAJ,CAAgBG,IAAhB,EAAsB;IAAEG,OAAO,EAAE,KAAX;IAAkBC,UAAU,EAAE,IAA9B;YAAoCF;GAA1D,CAAd;EACA,IAAID,OAAJ,EAAa7D,MAAM,CAACmB,gBAAP,CAAwByC,IAAxB,EAA8BC,OAA9B,EAAwD;IAAEd,IAAI,EAAE;GAAhE,CAAwD;EAErE,IAAIF,QAAJ,EACEoB,kCAA2B,CAACjE,MAAD,EAASD,KAAT,CAA3B,MAEAC,MAAM,CAAC0D,aAAP,CAAqB3D,KAArB;;AAIJ,MAAMmE,yCAAI,GAAGlG,yCAAb;AACA,MAAMmG,yCAAM,GAAGlC,yCAAf","names":["DISMISSABLE_LAYER_NAME","CONTEXT_UPDATE","POINTER_DOWN_OUTSIDE","FOCUS_OUTSIDE","originalBodyPointerEvents","DismissableLayerContext","React","layers","Set","layersWithOutsidePointerEventsDisabled","branches","DismissableLayer","props","forwardedRef","disableOutsidePointerEvents","onEscapeKeyDown","onPointerDownOutside","onFocusOutside","onInteractOutside","onDismiss","layerProps","context","node","setNode","ownerDocument","globalThis","document","force","composedRefs","useComposedRefs","Array","from","highestLayerWithOutsidePointerEventsDisabled","slice","highestLayerWithOutsidePointerEventsDisabledIndex","indexOf","index","isBodyPointerEventsDisabled","size","isPointerEventsEnabled","pointerDownOutside","usePointerDownOutside","event","target","isPointerDownOnBranch","some","branch","contains","defaultPrevented","focusOutside","useFocusOutside","isFocusInBranch","useEscapeKeydown","isHighestLayer","preventDefault","body","style","pointerEvents","add","dispatchUpdate","delete","handleUpdate","addEventListener","removeEventListener","$kqwpH$createElement","$kqwpH$Primitive","div","ref","undefined","onFocusCapture","composeEventHandlers","onBlurCapture","onPointerDownCapture","Object","displayName","BRANCH_NAME","DismissableLayerBranch","current","$5cb92bef7577960e$var$usePointerDownOutside","handlePointerDownOutside","useCallbackRef","isPointerInsideReactTreeRef","handleClickRef","handlePointerDown","eventDetail","originalEvent","handleAndDispatchPointerDownOutsideEvent","handleAndDispatchCustomEvent","discrete","pointerType","once","timerId","window","setTimeout","clearTimeout","$5cb92bef7577960e$var$useFocusOutside","handleFocusOutside","isFocusInsideReactTreeRef","handleFocus","$5cb92bef7577960e$var$dispatchUpdate","CustomEvent","dispatchEvent","$5cb92bef7577960e$var$handleAndDispatchCustomEvent","name","handler","detail","bubbles","cancelable","dispatchDiscreteCustomEvent","Root","Branch"],"sources":["/home/dev/Desktop/bijil/car-rental-react-main (1)/car-rental-react-main/node_modules/@radix-ui/react-dismissable-layer/dist/packages/react/dismissable-layer/src/DismissableLayer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useEscapeKeydown } from '@radix-ui/react-use-escape-keydown';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayer\n * -----------------------------------------------------------------------------------------------*/\n\nconst DISMISSABLE_LAYER_NAME = 'DismissableLayer';\nconst CONTEXT_UPDATE = 'dismissableLayer.update';\nconst POINTER_DOWN_OUTSIDE = 'dismissableLayer.pointerDownOutside';\nconst FOCUS_OUTSIDE = 'dismissableLayer.focusOutside';\n\nlet originalBodyPointerEvents: string;\n\nconst DismissableLayerContext = React.createContext({\n  layers: new Set<DismissableLayerElement>(),\n  layersWithOutsidePointerEventsDisabled: new Set<DismissableLayerElement>(),\n  branches: new Set<DismissableLayerBranchElement>(),\n});\n\ntype DismissableLayerElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DismissableLayerProps extends PrimitiveDivProps {\n  /**\n   * When `true`, hover/focus/click interactions will be disabled on elements outside\n   * the `DismissableLayer`. Users will need to click twice on outside elements to\n   * interact with them: once to close the `DismissableLayer`, and again to trigger the element.\n   */\n  disableOutsidePointerEvents?: boolean;\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void;\n  /**\n   * Event handler called when the focus moves outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onFocusOutside?: (event: FocusOutsideEvent) => void;\n  /**\n   * Event handler called when an interaction happens outside the `DismissableLayer`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: (event: PointerDownOutsideEvent | FocusOutsideEvent) => void;\n  /**\n   * Handler called when the `DismissableLayer` should be dismissed\n   */\n  onDismiss?: () => void;\n}\n\nconst DismissableLayer = React.forwardRef<DismissableLayerElement, DismissableLayerProps>(\n  (props, forwardedRef) => {\n    const {\n      disableOutsidePointerEvents = false,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      onDismiss,\n      ...layerProps\n    } = props;\n    const context = React.useContext(DismissableLayerContext);\n    const [node, setNode] = React.useState<DismissableLayerElement | null>(null);\n    const ownerDocument = node?.ownerDocument ?? globalThis?.document;\n    const [, force] = React.useState({});\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setNode(node));\n    const layers = Array.from(context.layers);\n    const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1); // prettier-ignore\n    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled); // prettier-ignore\n    const index = node ? layers.indexOf(node) : -1;\n    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n\n    const pointerDownOutside = usePointerDownOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n      onPointerDownOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    const focusOutside = useFocusOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (isFocusInBranch) return;\n      onFocusOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    useEscapeKeydown((event) => {\n      const isHighestLayer = index === context.layers.size - 1;\n      if (!isHighestLayer) return;\n      onEscapeKeyDown?.(event);\n      if (!event.defaultPrevented && onDismiss) {\n        event.preventDefault();\n        onDismiss();\n      }\n    }, ownerDocument);\n\n    React.useEffect(() => {\n      if (!node) return;\n      if (disableOutsidePointerEvents) {\n        if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n          originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n          ownerDocument.body.style.pointerEvents = 'none';\n        }\n        context.layersWithOutsidePointerEventsDisabled.add(node);\n      }\n      context.layers.add(node);\n      dispatchUpdate();\n      return () => {\n        if (\n          disableOutsidePointerEvents &&\n          context.layersWithOutsidePointerEventsDisabled.size === 1\n        ) {\n          ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n        }\n      };\n    }, [node, ownerDocument, disableOutsidePointerEvents, context]);\n\n    /**\n     * We purposefully prevent combining this effect with the `disableOutsidePointerEvents` effect\n     * because a change to `disableOutsidePointerEvents` would remove this layer from the stack\n     * and add it to the end again so the layering order wouldn't be _creation order_.\n     * We only want them to be removed from context stacks when unmounted.\n     */\n    React.useEffect(() => {\n      return () => {\n        if (!node) return;\n        context.layers.delete(node);\n        context.layersWithOutsidePointerEventsDisabled.delete(node);\n        dispatchUpdate();\n      };\n    }, [node, context]);\n\n    React.useEffect(() => {\n      const handleUpdate = () => force({});\n      document.addEventListener(CONTEXT_UPDATE, handleUpdate);\n      return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);\n    }, []);\n\n    return (\n      <Primitive.div\n        {...layerProps}\n        ref={composedRefs}\n        style={{\n          pointerEvents: isBodyPointerEventsDisabled\n            ? isPointerEventsEnabled\n              ? 'auto'\n              : 'none'\n            : undefined,\n          ...props.style,\n        }}\n        onFocusCapture={composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture)}\n        onBlurCapture={composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture)}\n        onPointerDownCapture={composeEventHandlers(\n          props.onPointerDownCapture,\n          pointerDownOutside.onPointerDownCapture\n        )}\n      />\n    );\n  }\n);\n\nDismissableLayer.displayName = DISMISSABLE_LAYER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayerBranch\n * -----------------------------------------------------------------------------------------------*/\n\nconst BRANCH_NAME = 'DismissableLayerBranch';\n\ntype DismissableLayerBranchElement = React.ElementRef<typeof Primitive.div>;\ninterface DismissableLayerBranchProps extends PrimitiveDivProps {}\n\nconst DismissableLayerBranch = React.forwardRef<\n  DismissableLayerBranchElement,\n  DismissableLayerBranchProps\n>((props, forwardedRef) => {\n  const context = React.useContext(DismissableLayerContext);\n  const ref = React.useRef<DismissableLayerBranchElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      context.branches.add(node);\n      return () => {\n        context.branches.delete(node);\n      };\n    }\n  }, [context.branches]);\n\n  return <Primitive.div {...props} ref={composedRefs} />;\n});\n\nDismissableLayerBranch.displayName = BRANCH_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype PointerDownOutsideEvent = CustomEvent<{ originalEvent: PointerEvent }>;\ntype FocusOutsideEvent = CustomEvent<{ originalEvent: FocusEvent }>;\n\n/**\n * Listens for `pointerdown` outside a react subtree. We use `pointerdown` rather than `pointerup`\n * to mimic layer dismissing behaviour present in OS.\n * Returns props to pass to the node we want to check for outside events.\n */\nfunction usePointerDownOutside(\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handlePointerDownOutside = useCallbackRef(onPointerDownOutside) as EventListener;\n  const isPointerInsideReactTreeRef = React.useRef(false);\n  const handleClickRef = React.useRef(() => {});\n\n  React.useEffect(() => {\n    const handlePointerDown = (event: PointerEvent) => {\n      if (event.target && !isPointerInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n\n        function handleAndDispatchPointerDownOutsideEvent() {\n          handleAndDispatchCustomEvent(\n            POINTER_DOWN_OUTSIDE,\n            handlePointerDownOutside,\n            eventDetail,\n            { discrete: true }\n          );\n        }\n\n        /**\n         * On touch devices, we need to wait for a click event because browsers implement\n         * a ~350ms delay between the time the user stops touching the display and when the\n         * browser executres events. We need to ensure we don't reactivate pointer-events within\n         * this timeframe otherwise the browser may execute events that should have been prevented.\n         *\n         * Additionally, this also lets us deal automatically with cancellations when a click event\n         * isn't raised because the page was considered scrolled/drag-scrolled, long-pressed, etc.\n         *\n         * This is why we also continuously remove the previous listener, because we cannot be\n         * certain that it was raised, and therefore cleaned-up.\n         */\n        if (event.pointerType === 'touch') {\n          ownerDocument.removeEventListener('click', handleClickRef.current);\n          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;\n          ownerDocument.addEventListener('click', handleClickRef.current, { once: true });\n        } else {\n          handleAndDispatchPointerDownOutsideEvent();\n        }\n      }\n      isPointerInsideReactTreeRef.current = false;\n    };\n    /**\n     * if this hook executes in a component that mounts via a `pointerdown` event, the event\n     * would bubble up to the document and trigger a `pointerDownOutside` event. We avoid\n     * this by delaying the event listener registration on the document.\n     * This is not React specific, but rather how the DOM works, ie:\n     * ```\n     * button.addEventListener('pointerdown', () => {\n     *   console.log('I will log');\n     *   document.addEventListener('pointerdown', () => {\n     *     console.log('I will also log');\n     *   })\n     * });\n     */\n    const timerId = window.setTimeout(() => {\n      ownerDocument.addEventListener('pointerdown', handlePointerDown);\n    }, 0);\n    return () => {\n      window.clearTimeout(timerId);\n      ownerDocument.removeEventListener('pointerdown', handlePointerDown);\n      ownerDocument.removeEventListener('click', handleClickRef.current);\n    };\n  }, [ownerDocument, handlePointerDownOutside]);\n\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onPointerDownCapture: () => (isPointerInsideReactTreeRef.current = true),\n  };\n}\n\n/**\n * Listens for when focus happens outside a react subtree.\n * Returns props to pass to the root (node) of the subtree we want to check.\n */\nfunction useFocusOutside(\n  onFocusOutside?: (event: FocusOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handleFocusOutside = useCallbackRef(onFocusOutside) as EventListener;\n  const isFocusInsideReactTreeRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const handleFocus = (event: FocusEvent) => {\n      if (event.target && !isFocusInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n          discrete: false,\n        });\n      }\n    };\n    ownerDocument.addEventListener('focusin', handleFocus);\n    return () => ownerDocument.removeEventListener('focusin', handleFocus);\n  }, [ownerDocument, handleFocusOutside]);\n\n  return {\n    onFocusCapture: () => (isFocusInsideReactTreeRef.current = true),\n    onBlurCapture: () => (isFocusInsideReactTreeRef.current = false),\n  };\n}\n\nfunction dispatchUpdate() {\n  const event = new CustomEvent(CONTEXT_UPDATE);\n  document.dispatchEvent(event);\n}\n\nfunction handleAndDispatchCustomEvent<E extends CustomEvent, OriginalEvent extends Event>(\n  name: string,\n  handler: ((event: E) => void) | undefined,\n  detail: { originalEvent: OriginalEvent } & (E extends CustomEvent<infer D> ? D : never),\n  { discrete }: { discrete: boolean }\n) {\n  const target = detail.originalEvent.target;\n  const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });\n  if (handler) target.addEventListener(name, handler as EventListener, { once: true });\n\n  if (discrete) {\n    dispatchDiscreteCustomEvent(target, event);\n  } else {\n    target.dispatchEvent(event);\n  }\n}\n\nconst Root = DismissableLayer;\nconst Branch = DismissableLayerBranch;\n\nexport {\n  DismissableLayer,\n  DismissableLayerBranch,\n  //\n  Root,\n  Branch,\n};\nexport type { DismissableLayerProps };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}